import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class Student {
    private String name;
    private List<String> tasks;

    public Student(String name) {
        this.name = name;
        this.tasks = new ArrayList<>();
    }

    public String getName() {
        return name;
    }

    public List<String> getTasks() {
        return tasks;
    }

    public void addTask(String task) {
        tasks.add(task);
    }
}

class Group {
    private String name;
    private List<Student> students;

    public Group(String name) {
        this.name = name;
        this.students = new ArrayList<>();
    }

    public String getName() {
        return name;
    }

    public List<Student> getStudents() {
        return students;
    }

    public void addStudent(Student student) {
        students.add(student);
    }

    public void removeStudent(Student student) {
        students.remove(student);
    }
}

public class Main {
    private static List<Group> groups = new ArrayList<>();

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        boolean running = true;

        while (running) {
            System.out.println("Выберите действие:");
            System.out.println("1. Создать группу");
            System.out.println("2. Удалить группу");
            System.out.println("3. Просмотреть группы");
            System.out.println("4. Создать студента");
            System.out.println("5. Удалить студента");
            System.out.println("6. Просмотреть студентов в группе");
            System.out.println("0. Выход");

            int choice = scanner.nextInt();
            scanner.nextLine(); // Очистка буфера чтения

            switch (choice) {
                case 1:
                    createGroup(scanner);
                    break;
                case 2:
                    deleteGroup(scanner);
                    break;
                case 3:
                    viewGroups();
                    break;
                case 4:
                    createStudent(scanner);
                    break;
                case 5:
                    deleteStudent(scanner);
                    break;
                case 6:
                    viewStudentsInGroup(scanner);
                    break;
                case 0:
                    running = false;
                    break;
                default:
                    System.out.println("Некорректный выбор. Попробуйте еще раз.");
                    break;
            }

            System.out.println();
        }

        scanner.close();
        System.out.println("Работа программы завершена.");
    }

    public static void createGroup(Scanner scanner) {
        System.out.println("Введите название группы:");
        String groupName = scanner.nextLine();

        Group newGroup = new Group(groupName);
        groups.add(newGroup);

        System.out.println("Группа успешно создана.");
    }

    public static void deleteGroup(Scanner scanner) {
        System.out.println("Введите название группы для удаления:");
        String groupName = scanner.nextLine();

        Group groupToDelete = findGroupByName(groupName);

        if (groupToDelete != null) {
            groups.remove(groupToDelete);
            System.out.println("Группа успешно удалена.");
        } else {
            System.out.println("Группа не найдена.");
        }
    }

    public static void viewGroups() {
        System.out.println("Список групп:");

        if (groups.isEmpty()) {
            System.out.println("Нет доступных групп.");
        }

        for (Group group : groups) {
            System.out.println("Группа: " + group.getName());
        }
    }

    public static void createStudent(Scanner scanner) {
        System.out.println("Введите название группы, в которую добавить студента:");
        String groupName = scanner.nextLine();

        Group group = findGroupByName(groupName);

        if (group != null) {
            System.out.println("Введите имя студента:");
            String studentName = scanner.nextLine();

            Student newStudent = new Student(studentName);
            group.addStudent(newStudent);

            System.out.println("Студент успешно добавлен в группу.");
        } else {
            System.out.println("Группа не найдена.");
        }
    }

    public static void deleteStudent(Scanner scanner) {
        System.out.println("Введите название группы, из которой удалить студента:");
        String groupName = scanner.nextLine();

        Group group = findGroupByName(groupName);

        if (group != null) {
            System.out.println("Введите имя студента для удаления:");
            String studentName = scanner.nextLine();

            Student studentToDelete = findStudentByName(group, studentName);

            if (studentToDelete != null) {
                group.removeStudent(studentToDelete);
                System.out.println("Студент успешно удален из группы.");
            } else {
                System.out.println("Студент не найден в группе.");
            }
        } else {
            System.out.println("Группа не найдена.");
        }
    }

    public static void viewStudentsInGroup(Scanner scanner) {
        System.out.println("Введите название группы для просмотра студентов:");
        String groupName = scanner.nextLine();

        Group group = findGroupByName(groupName);

        if (group != null) {
            List<Student> students = group.getStudents();

            if (students.isEmpty()) {
                System.out.println("В группе нет студентов.");
            }

            System.out.println("Студенты в группе " + group.getName() + ":");

            for (Student student : students) {
                System.out.println("Студент: " + student.getName());
            }
        } else {
            System.out.println("Группа не найдена.");
        }
    }

    public static Group findGroupByName(String groupName) {
        for (Group group : groups) {
            if (group.getName().equals(groupName)) {
                return group;
            }
        }

        return null;
    }

    public static Student findStudentByName(Group group, String studentName) {
        List<Student> students = group.getStudents();

        for (Student student : students) {
            if (student.getName().equals(studentName)) {
                return student;
            }
        }

        return null;
    }
}
