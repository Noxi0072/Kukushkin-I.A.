import java.util.HashMap;
import java.util.Map;

public class Main {

    public static void main(String[] args) {

        VirtualMachineBridge bridge = new VirtualMachineBridge();


        VirtualMachine vmware = new VMwareVM(bridge);
        VirtualMachine hyperv = new HyperVVM(bridge);
        VirtualMachine virtualbox = new VirtualBoxVM(bridge);


        bridge.setImplementation(new VMwareImplementation());
        vmware.start();
        vmware.stop();

        bridge.setImplementation(new HyperVImplementation());
        hyperv.start();
        hyperv.stop();

        bridge.setImplementation(new VirtualBoxImplementation());
        virtualbox.start();
        virtualbox.stop();
    }
}


interface VirtualMachine {
    void start();
    void stop();
}


class VMwareVM implements VirtualMachine {
    private VirtualMachineBridge bridge;

    public VMwareVM(VirtualMachineBridge bridge) {
        this.bridge = bridge;
    }

    @Override
    public void start() {
        bridge.startVM();
    }

    @Override
    public void stop() {
        bridge.stopVM();
    }
}

class HyperVVM implements VirtualMachine {
    private VirtualMachineBridge bridge;

    public HyperVVM(VirtualMachineBridge bridge) {
        this.bridge = bridge;
    }

    @Override
    public void start() {
        bridge.startVM();
    }

    @Override
    public void stop() {
        bridge.stopVM();
    }
}

class VirtualBoxVM implements VirtualMachine {
    private VirtualMachineBridge bridge;

    public VirtualBoxVM(VirtualMachineBridge bridge) {
        this.bridge = bridge;
    }

    @Override
    public void start() {
        bridge.startVM();
    }

    @Override
    public void stop() {
        bridge.stopVM();
    }
}


class VirtualMachineBridge {
    private VirtualMachineImplementation implementation;

    public void setImplementation(VirtualMachineImplementation implementation) {
        this.implementation = implementation;
    }

    public void startVM() {
        implementation.startVM();
    }

    public void stopVM() {
        implementation.stopVM();
    }
}


interface VirtualMachineImplementation {
    void startVM();
    void stopVM();
}


class VMwareImplementation implements VirtualMachineImplementation {
    @Override
    public void startVM() {
        System.out.println("Starting VMware virtual machine...");
    }

    @Override
    public void stopVM() {
        System.out.println("Stopping VMware virtual machine...");
    }
}

class HyperVImplementation implements VirtualMachineImplementation {
    @Override
    public void startVM() {
        System.out.println("Starting Hyper-V virtual machine...");
    }

    @Override
    public void stopVM() {
        System.out.println("Stopping Hyper-V virtual machine...");
    }
}

class VirtualBoxImplementation implements VirtualMachineImplementation {
    @Override
    public void startVM() {
        System.out.println("Starting VirtualBox virtual machine...");
    }

    @Override
    public void stopVM() {
        System.out.println("Stopping VirtualBox virtual machine...");
    }
}
