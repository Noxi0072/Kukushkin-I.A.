import java.util.ArrayList;
import java.util.List;

public class Main {

    public static void main(String[] args) {
        List<Aircraft> aircrafts = new ArrayList<>();


        AircraftFactory planeFactory = new PlaneFactory();
        aircrafts.add(planeFactory.createAircraft("Boeing 747", 1000, 500));


        AircraftFactory helicopterFactory = new HelicopterFactory();
        aircrafts.add(helicopterFactory.createAircraft("Mi-8", 500, 200));


        AircraftFactory airshipFactory = new AirshipFactory();
        aircrafts.add(airshipFactory.createAircraft("Hindenburg", 1500, 1000));

        for (Aircraft aircraft : aircrafts) {
            System.out.println(aircraft);
            aircraft.fly();
        }
    }
}

abstract class Aircraft {
    protected String model;
    protected int maxSpeed;
    protected int maxAltitude;

    public Aircraft(String model, int maxSpeed, int maxAltitude) {
        this.model = model;
        this.maxSpeed = maxSpeed;
        this.maxAltitude = maxAltitude;
    }

    public abstract void fly();

    @Override
    public String toString() {
        return "Aircraft{" +
                "model='" + model + '\'' +
                ", maxSpeed=" + maxSpeed +
                ", maxAltitude=" + maxAltitude +
                '}';
    }
}

class Plane extends Aircraft {

    public Plane(String model, int maxSpeed, int maxAltitude) {
        super(model, maxSpeed, maxAltitude);
    }

    @Override
    public void fly() {
        System.out.println(model + " is flying at high altitude!");
    }
}

class Helicopter extends Aircraft {

    public Helicopter(String model, int maxSpeed, int maxAltitude) {
        super(model, maxSpeed, maxAltitude);
    }

    @Override
    public void fly() {
        System.out.println(model + " is hovering in the air!");
    }
}

class Airship extends Aircraft {

    public Airship(String model, int maxSpeed, int maxAltitude) {
        super(model, maxSpeed, maxAltitude);
    }

    @Override
    public void fly() {
        System.out.println(model + " is slowly floating through the sky!");
    }
}

abstract class AircraftFactory {
    public abstract Aircraft createAircraft(String model, int maxSpeed, int maxAltitude);
}

class PlaneFactory extends AircraftFactory {

    @Override
    public Aircraft createAircraft(String model, int maxSpeed, int maxAltitude) {
        return new Plane(model, maxSpeed, maxAltitude);
    }
}

class HelicopterFactory extends AircraftFactory {

    @Override
    public Aircraft createAircraft(String model, int maxSpeed, int maxAltitude) {
        return new Helicopter(model, maxSpeed, maxAltitude);
    }
}

class AirshipFactory extends AircraftFactory {

    @Override
    public Aircraft createAircraft(String model, int maxSpeed, int maxAltitude) {
        return new Airship(model, maxSpeed, maxAltitude);
    }
}
